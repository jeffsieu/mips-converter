{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/instructions/format/format.ts","../../src/instructions/instruction-field.ts","../../src/instructions/field-extractor.ts","../../src/instructions/instruction.ts","../../src/instructions/parser/extractors.ts","../../src/instructions/r-instruction.ts","../../src/instructions/i-instruction.ts","../../src/instructions/j-instruction.ts","../../src/instructions/unknown-instruction.ts","../../src/instructions/parser/input-parser.ts","../../src/instructions/mips-formats/mips-instruction-format.ts","../../src/instructions/parser/mips-parser.ts","../../src/utils.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.43.1' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export class ImmediateFormat {\n    constructor(name) {\n        this.name = name;\n    }\n}\nexport class HexFormat extends ImmediateFormat {\n    constructor() {\n        super('hex');\n    }\n    format(binary) {\n        return '0x' + parseInt(binary, 2).toString(16);\n    }\n}\nexport class DecFormat extends ImmediateFormat {\n    constructor() {\n        super('decimal');\n    }\n    format(binary) {\n        return parseInt(binary, 2).toString(10);\n    }\n}\nexport class BinFormat extends ImmediateFormat {\n    constructor() {\n        super('binary');\n    }\n    format(binary) {\n        return '0b' + parseInt(binary, 2).toString(2);\n    }\n}\n","export default class InstructionField {\n    constructor(name, value, binary, length) {\n        this.name = name;\n        this.value = value;\n        this.binary = binary;\n        this.length = length;\n        this.interpolatedValue = parseInt(binary.padEnd(length, '0'), 2);\n    }\n}\n;\n","import InstructionField from \"./instruction-field\";\nclass RInstructionFieldExtract {\n    extractFields() {\n    }\n}\nexport default class FieldExtractor {\n    constructor(binary) {\n        this.bits = binary;\n    }\n    extractBits(length) {\n        const extracted = this.bits.substring(0, length);\n        this.bits = this.bits.substring(length);\n        return extracted;\n    }\n    extractField(name, length, getValue) {\n        let fieldValue = 'unknown';\n        const extractedBits = this.extractBits(length);\n        {\n            try {\n                fieldValue = getValue(extractedBits.padEnd(length, '0'));\n            }\n            catch (e) {\n                fieldValue = 'error';\n            }\n        }\n        return new InstructionField(name, fieldValue, extractedBits, length);\n    }\n}\n","export default class Instruction {\n    constructor(opcode, fields, spec) {\n        this.opcode = opcode;\n        this.fields = fields;\n        this.spec = spec;\n    }\n}\n","import instructions from '../../data/instructionSpec.json';\nimport registers from '../../data/registers.json';\nconst rInstructions = instructions.filter(i => i.functionCode !== null);\nexport function getOpcodeValue(bits) {\n    var _a;\n    const opcode = parseInt(bits, 2);\n    if (opcode === 0) {\n        // R-type instruction\n        return 'R';\n    }\n    else {\n        const instruction = instructions.find(i => i.opcode === opcode);\n        return (_a = instruction === null || instruction === void 0 ? void 0 : instruction.mnemonic) !== null && _a !== void 0 ? _a : 'unknown';\n    }\n}\nexport function getShiftAmount(shiftAmount) {\n    return parseInt(shiftAmount, 2).toString(10);\n}\nexport function getFunctionCode(functionCode) {\n    return rInstructions.find((i) => i.functionCode === parseInt(functionCode, 2)).mnemonic;\n}\nexport function getImmediate(immediateFormat) {\n    return (immediate) => immediateFormat.format(immediate);\n}\nexport function getJumpAddress(immediateFormat) {\n    return (address) => immediateFormat.format(address);\n}\nexport function getUnknown(bits) {\n    return bits;\n}\nexport function getRegisterNumber(binary) {\n    const registerNumber = parseInt(binary, 2);\n    return `\\$${registerNumber}`;\n}\nexport function getRegisterName(binary) {\n    var _a, _b;\n    const registerNumber = parseInt(binary, 2);\n    const registerName = (_b = (_a = registers.find(r => r.number === registerNumber)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'unknown';\n    return `\\$${registerName}`;\n}\nexport function getRegisterNumberFromName(name) {\n    var _a, _b;\n    const nameAsNumber = parseInt(name);\n    if (isNaN(nameAsNumber)) {\n        return (_b = (_a = registers.find(r => r.name === name)) === null || _a === void 0 ? void 0 : _a.number) !== null && _b !== void 0 ? _b : null;\n    }\n    else {\n        return nameAsNumber;\n    }\n}\nexport function getInstructionSpecWithMnemonic(mnemonic) {\n    var _a;\n    return (_a = instructions.find(i => i.mnemonic === mnemonic)) !== null && _a !== void 0 ? _a : null;\n}\n","import instructionSpecs from '../data/instructionSpec.json';\nimport FieldExtractor from './field-extractor';\nimport Instruction from \"./instruction\";\nimport { getFunctionCode, getOpcodeValue, getRegisterName, getRegisterNumber, getShiftAmount } from './parser/extractors';\nfunction getRelevantFields(spec) {\n    // all\n    // rs (jr)\n    // shift (rd, rt, shamt) (sll, srl, sra)\n    // rs and rt (div/ divu mult multu)\n    // rd only (mfhi, mflo)\n    // rd and rs (mfc0)\n    switch (spec === null || spec === void 0 ? void 0 : spec.mnemonic) {\n        case 'jr':\n            return ['rs', 'funct'];\n        case 'sll':\n        case 'srl':\n        case 'sra':\n            return ['rd', 'rt', 'shamt', 'funct'];\n        case 'div':\n        case 'divu':\n        case 'mult':\n        case 'multu':\n            return ['rs', 'rt', 'funct'];\n        case 'mfhi':\n        case 'mflo':\n            return ['rd', 'funct'];\n        // case 'mfc0':\n        // The opcode is 10 in hex\n        // return ['rd', 'rs', 'fcode'];\n        default:\n            return ['rd', 'rs', 'rt', 'funct'];\n    }\n}\nexport default class RInstruction extends Instruction {\n    constructor(opcode, rs, rt, rd, shamt, funct) {\n        var _a;\n        super(opcode, [opcode, rs, rt, rd, shamt, funct], // fields\n        (_a = instructionSpecs.find(spec => spec.functionCode === funct.interpolatedValue)) !== null && _a !== void 0 ? _a : null);\n        this.rs = rs;\n        this.rt = rt;\n        this.rd = rd;\n        this.shamt = shamt;\n        this.funct = funct;\n    }\n    static fromBinary(binary, settings) {\n        const extractor = new FieldExtractor(binary);\n        const getRegister = settings.registerMode === 'names' ? getRegisterName : getRegisterNumber;\n        const opcode = extractor.extractField('opcode', 6, getOpcodeValue);\n        const rs = extractor.extractField('rs', 5, getRegister);\n        const rt = extractor.extractField('rt', 5, getRegister);\n        const rd = extractor.extractField('rd', 5, getRegister);\n        const shamt = extractor.extractField('shamt', 5, getShiftAmount);\n        const funct = extractor.extractField('funct', 6, getFunctionCode);\n        return new RInstruction(opcode, rs, rt, rd, shamt, funct);\n    }\n    toMips() {\n        if (!this.spec)\n            return null;\n        const usedFieldNames = getRelevantFields(this.spec);\n        const fieldsInInstruction = ['rd', 'rs', 'rt', 'shamt'];\n        const commaDelimitedRegisters = this.fields\n            .filter(f => fieldsInInstruction.includes(f.name) && usedFieldNames.includes(f.name))\n            .sort((f1, f2) => fieldsInInstruction.indexOf(f1.name) - fieldsInInstruction.indexOf(f2.name))\n            .map(f => f.value).join(', ');\n        const mipsInstruction = this.spec.mnemonic + ' ' + commaDelimitedRegisters;\n        return mipsInstruction;\n    }\n}\n","import instructionSpecs from '../data/instructionSpec.json';\nimport FieldExtractor from './field-extractor';\nimport Instruction from \"./instruction\";\nimport { getImmediate, getOpcodeValue, getRegisterName, getRegisterNumber } from './parser/extractors';\nfunction formatIInstruction(mnemonic, fields) {\n    // Fields = [rs, rt, immed]\n    const fieldValues = fields.map(f => f.value);\n    switch (mnemonic) {\n        case 'lbu':\n        case 'lhu':\n        case 'll':\n        case 'lui':\n        case 'lw':\n        case 'lb':\n        case 'sb':\n        case 'sc':\n        case 'sh':\n        case 'sw':\n            return `${fieldValues[1]}, ${fieldValues[2]}(${fieldValues[0]})`;\n        case 'beq':\n        case 'bne':\n        default:\n            // format: addi r1, r2, immed\n            return `${fieldValues[1]}, ${fieldValues[0]}, ${fieldValues[2]}`;\n    }\n}\nexport default class IInstruction extends Instruction {\n    constructor(opcode, rs, rt, immediate) {\n        var _a;\n        super(opcode, [opcode, rs, rt, immediate], // fields\n        (_a = instructionSpecs.find(spec => spec.opcode === opcode.interpolatedValue)) !== null && _a !== void 0 ? _a : null // instructionSpec\n        );\n        this.rs = rs;\n        this.rt = rt;\n        this.immediate = immediate;\n    }\n    static fromBinary(binary, settings) {\n        const extractor = new FieldExtractor(binary);\n        const getRegister = settings.registerMode === 'names' ? getRegisterName : getRegisterNumber;\n        const opcode = extractor.extractField('opcode', 6, getOpcodeValue);\n        const rs = extractor.extractField('rs', 5, getRegister);\n        const rt = extractor.extractField('rt', 5, getRegister);\n        const immediate = extractor.extractField('immed', 16, getImmediate(settings.immediateFormat));\n        return new IInstruction(opcode, rs, rt, immediate);\n    }\n    toMips() {\n        var _a, _b;\n        if (!((_a = this.spec) === null || _a === void 0 ? void 0 : _a.mnemonic)) {\n            return null;\n        }\n        const fieldsInInstruction = ['rs', 'rt', 'immed'];\n        const filteredFields = this.fields\n            .filter(f => fieldsInInstruction.includes(f.name))\n            .sort((f1, f2) => fieldsInInstruction.indexOf(f1.name) - fieldsInInstruction.indexOf(f2.name));\n        const formatString = formatIInstruction((_b = this.spec) === null || _b === void 0 ? void 0 : _b.mnemonic, filteredFields);\n        const mipsInstruction = this.spec.mnemonic + ' ' + formatString;\n        return mipsInstruction;\n    }\n}\n","import instructionSpecs from '../data/instructionSpec.json';\nimport FieldExtractor from './field-extractor';\nimport Instruction from \"./instruction\";\nimport { getJumpAddress, getOpcodeValue } from './parser/extractors';\nexport default class JInstruction extends Instruction {\n    constructor(opcode, jumpAddress) {\n        var _a;\n        super(opcode, [opcode, jumpAddress], // fields\n        (_a = instructionSpecs.find(spec => spec.opcode === opcode.interpolatedValue)) !== null && _a !== void 0 ? _a : null);\n        this.jumpAddress = jumpAddress;\n    }\n    static fromBinary(binary, settings) {\n        const extractor = new FieldExtractor(binary);\n        const opcode = extractor.extractField('opcode', 6, getOpcodeValue);\n        const jumpAddress = extractor.extractField('jaddr', 26, getJumpAddress(settings.immediateFormat));\n        return new JInstruction(opcode, jumpAddress);\n    }\n    toMips() {\n        const mipsInstruction = this.opcode.value + ' ' + this.jumpAddress.value;\n        return mipsInstruction;\n    }\n}\n","import FieldExtractor from \"./field-extractor\";\nimport Instruction from \"./instruction\";\nimport { getOpcodeValue, getUnknown } from \"./parser/extractors\";\nexport default class UnknownInstruction extends Instruction {\n    constructor(opcode, unknown) {\n        super(opcode, [opcode, unknown], // fields\n        null);\n        this.unknown = unknown;\n    }\n    static fromBinary(binary, settings) {\n        const extractor = new FieldExtractor(binary);\n        const opcode = extractor.extractField('opcode', 6, getOpcodeValue);\n        const unknown = extractor.extractField('unknown', 26, getUnknown);\n        return new UnknownInstruction(opcode, unknown);\n    }\n    toMips() {\n        return null;\n    }\n}\n","export class Parser {\n}\nexport class InputParser extends Parser {\n    constructor(regex, formatName, toParse) {\n        super();\n        const matches = toParse.match(regex);\n        const extracted = matches ? matches[1] : '';\n        if (toParse.length > 8 && extracted.length === 8) {\n            this.parseInfo = {\n                value: formatName + ' truncated to \"' + extracted + '\"',\n                severity: 'info',\n            };\n        }\n        else if (extracted.length < toParse.length) {\n            this.parseInfo = {\n                value: 'Invalid ' + formatName + ' input',\n                severity: 'info',\n            };\n        }\n        else {\n            this.parseInfo = null;\n        }\n        this.extracted = extracted;\n    }\n    get() {\n        return this.extracted;\n    }\n    getParseInfo() {\n        return this.parseInfo;\n    }\n}\nexport class BinInputParser extends InputParser {\n    constructor(toParse) {\n        super(/^(?:0x)?([0-1]{0,32})/, 'binary', toParse);\n    }\n}\nexport class HexInputParser extends InputParser {\n    constructor(toParse) {\n        super(/^(?:0x)?([0-9a-fA-F]{0,8})/, 'hex', toParse);\n    }\n}\n","var _a;\nimport { getInstructionSpecWithMnemonic, getRegisterNumberFromName } from \"../parser/extractors\";\nconst shiftMnemonics = ['sll', 'srl', 'sra'];\nconst loadStoreMnemonics = ['lbu', 'lhu', 'll', 'lui', 'lw', 'lb', 'sb', 'sc', 'sh', 'sw'];\n/**\n * Returns if the instruction in MIPS is declared in the form \"mne $r1, $r2, $r3\"\n */\nfunction isInstructionDeclaredAsR(instructionSpec) {\n    return instructionSpec.type === 'R' && !isShiftInstruction(instructionSpec);\n}\n/**\n * Returns if the instruction in MIPS is declared in the form \"mne $r1, $r2, immed\"\n */\nfunction isInstructionDeclaredAsI(instructionSpec) {\n    return (instructionSpec.type === 'I' && !isLoadStoreInstruction(instructionSpec))\n        || isShiftInstruction(instructionSpec);\n}\nfunction isShiftInstruction(instructionSpec) {\n    return shiftMnemonics.includes(instructionSpec.mnemonic);\n}\nfunction isLoadStoreInstruction(instructionSpec) {\n    return loadStoreMnemonics.includes(instructionSpec.mnemonic);\n}\nfunction isJumpInstruction(instructionSpec) {\n    return instructionSpec.type === 'J';\n}\nfunction parseRegisterToBits(registerName) {\n    const registerNumber = getRegisterNumberFromName(registerName);\n    if (registerNumber === null) {\n        return {\n            value: null,\n            message: {\n                value: 'Unknown register: $' + registerName,\n                severity: 'error',\n            }\n        };\n    }\n    return {\n        value: registerNumber.toString(2).padStart(5, '0'),\n        message: null,\n    };\n}\nfunction parseImmediateWithLengthToBits(fieldName, immediate, length, signed) {\n    // No error will be thrown since regex always matches a valid immediate\n    const bits = parseInt(immediate).toString(2).padStart(length, '0');\n    // Throw error if out of range\n    if (bits.length > length) {\n        return {\n            value: null,\n            message: {\n                value: fieldName + ' value is too large: ' + immediate,\n                severity: 'error',\n            },\n        };\n    }\n    return {\n        value: bits,\n        message: null,\n    };\n}\nfunction parseImmediateToBits(immediate) {\n    // TODO: handle negative value for signed immediate instructions\n    // aka everything (including lw, sw), except those like addiu\n    return parseImmediateWithLengthToBits('immediate', immediate, 16, false);\n}\nfunction parseShiftAmountToBits(shiftAmount) {\n    return parseImmediateWithLengthToBits('shift amount', shiftAmount, 5, false);\n}\nfunction parseJumpAddressToBits(jumpAddress) {\n    return parseImmediateWithLengthToBits('shift amount', jumpAddress, 26, false);\n}\nfunction getThreeRegistersBits(instructionSpec, args) {\n    var _b;\n    if (args.length !== 3) {\n        // TODO: Better error name\n        throw new Error('???');\n    }\n    const registers = args.map(parseRegisterToBits);\n    const message = registers\n        .filter(result => result.message !== null)\n        .map(result => result.message.value)\n        .reduce((m1, m2) => m1 + '\\n' + m2, '');\n    if (registers.some(result => { var _b; return ((_b = result.message) === null || _b === void 0 ? void 0 : _b.severity) === 'error'; })) {\n        // Has an error, then return all the errors\n        return {\n            value: null,\n            message: {\n                value: message,\n                severity: 'error',\n            },\n        };\n    }\n    // All valid registers\n    const [rdBits, rsBits, rtBits] = registers.map(result => result.value);\n    const shamtBits = '00000';\n    const functBits = ((_b = instructionSpec.functionCode) !== null && _b !== void 0 ? _b : 0).toString(2).padStart(6, '0');\n    return {\n        value: rsBits + rtBits + rdBits + shamtBits + functBits,\n        message: null,\n    };\n}\nfunction getImmediateInstructionBits(instructionSpec, args) {\n    var _b;\n    if (args.length !== 3) {\n        // TODO: Better error name\n        throw new Error('???');\n    }\n    const isShift = isShiftInstruction(instructionSpec);\n    // args = [rDest, rSource, immediate]\n    const results = [parseRegisterToBits(args[0]), parseRegisterToBits(args[1]), isShift ? parseShiftAmountToBits(args[2]) : parseImmediateToBits(args[2])];\n    const message = results\n        .filter(result => result.message !== null)\n        .map(result => result.message.value)\n        .reduce((m1, m2) => m1 + '\\n' + m2, '');\n    if (results.some(result => { var _b; return ((_b = result.message) === null || _b === void 0 ? void 0 : _b.severity) === 'error'; })) {\n        // Has an error, then return all the errors\n        return {\n            value: null,\n            message: {\n                value: message,\n                severity: 'error',\n            },\n        };\n    }\n    if (isShift) {\n        // rt is shifted and stored in rd; rs is unused\n        const rsBits = '00000';\n        const functBits = (_b = instructionSpec.functionCode) === null || _b === void 0 ? void 0 : _b.toString(2).padStart(6);\n        const [rdBits, rtBits, shamtBits] = results.map(r => r.value);\n        return {\n            value: rsBits + rtBits + rdBits + shamtBits + functBits,\n            message: null,\n        };\n    }\n    else {\n        // Actual immediate instruction\n        const [rtBits, rsBits, immediateBits] = results.map(r => r.value);\n        return {\n            value: rsBits + rtBits + immediateBits,\n            message: null,\n        };\n    }\n}\nfunction getLoadStoreInstructionBits(instructionSpec, args) {\n    // TODO: Better error\n    if (args.length !== 3) {\n        throw new Error(\"???\");\n    }\n    // Same as normal immediate, just that order in args is different\n    // args: [rDest, immediate, rSource]\n    // required: [rDest, rSource, immediate]\n    const newArgs = [args[0], args[2], args[1]];\n    return getImmediateInstructionBits(instructionSpec, newArgs);\n}\nfunction getJumpInstructionBits(instructionSpec, args) {\n    // TODO: Better error\n    if (args.length !== 1) {\n        throw new Error('???');\n    }\n    return parseJumpAddressToBits(args[0]);\n}\nexport class MipsInstructionFormat {\n    constructor(instructionRegex, getSpecMatchesFormat, getArgBits) {\n        this.instructionRegex = instructionRegex;\n        this.getSpecMatchesFormat = getSpecMatchesFormat;\n        this.getArgBits = getArgBits;\n    }\n    parseMips(mipsString) {\n        const matches = mipsString.toLowerCase().match(this.instructionRegex);\n        // Unknown format\n        if (matches === null) {\n            return {\n                value: null,\n                message: null,\n            };\n        }\n        const mnemonic = matches[1];\n        const instructionSpec = getInstructionSpecWithMnemonic(mnemonic);\n        // Unknown mnemonic but valid overall format\n        if (instructionSpec === null) {\n            return {\n                value: null,\n                message: {\n                    value: 'Unknown mnemonic ' + mnemonic,\n                    severity: 'error',\n                }\n            };\n        }\n        const args = matches.slice(2);\n        let message = null;\n        // Validate arguments and convert to bits\n        const argBits = this.getArgBits(instructionSpec, args);\n        if (argBits.message !== null && argBits.message.severity === 'error') {\n            return {\n                value: null,\n                message: argBits.message,\n            };\n        }\n        else if (argBits.message !== null) {\n            message = argBits.message.value;\n        }\n        // At this point all arguments are valid\n        // Everything is valid, but mnemonic does not match format\n        // e.g. \"addi $t1, $t2, $t3\"\n        if (!this.getSpecMatchesFormat(instructionSpec)) {\n            return {\n                value: null,\n                message: {\n                    value: 'Format is valid but not for ' + instructionSpec.mnemonic,\n                    severity: 'error',\n                }\n            };\n        }\n        const opcodeBits = instructionSpec.opcode.toString(2).padStart(6, '0');\n        const instructionBinary = opcodeBits + argBits.value;\n        return {\n            value: instructionBinary,\n            message: message !== null ? {\n                value: message,\n                severity: 'info',\n            } : null,\n        };\n    }\n}\n_a = MipsInstructionFormat;\n/**\n * Represents a MIPS register.\n */\nMipsInstructionFormat.REGEX_REGISTER = '\\\\$(\\\\w+)';\n/**\n * Represents an immediate value.\n */\nMipsInstructionFormat.REGEX_IMMEDIATE = '(-?(?:0x|0b)?\\\\d+)';\n/**\n * Represents an instruction mnemonic.\n */\nMipsInstructionFormat.REGEX_MNEMONIC = '(\\\\w+)';\n/**\n * Represents instructions  with the format \"mne $t1, $t2, $t3\".\n */\nMipsInstructionFormat.REGEX_THREE_REGISTER = `^${_a.REGEX_MNEMONIC}\\\\s+${_a.REGEX_REGISTER}\\\\s*,\\\\s*${_a.REGEX_REGISTER}\\\\s*,\\\\s*${_a.REGEX_REGISTER}$`;\n/**\n * Represents instructions with the format \"mne $t1, $t2, immed\".\n */\nMipsInstructionFormat.REGEX_TWO_R_ONE_I = `^${_a.REGEX_MNEMONIC}\\\\s+${_a.REGEX_REGISTER}\\\\s*,\\\\s*${_a.REGEX_REGISTER}\\\\s*,\\\\s*${_a.REGEX_IMMEDIATE}$`;\n/**\n * Represents instructions with the format \"mne $t1, immed($t2)\".\n */\nMipsInstructionFormat.REGEX_LOAD_STORE = `^${_a.REGEX_MNEMONIC}\\\\s+${_a.REGEX_REGISTER}\\\\s*,\\\\s*${_a.REGEX_IMMEDIATE}?\\\\s*\\\\(\\\\s*${_a.REGEX_REGISTER}\\\\s*\\\\)$`;\n/**\n * Represents instructions with the format \"mne jaddress\".\n */\nMipsInstructionFormat.REGEX_JUMP = `^${_a.REGEX_MNEMONIC}\\\\s+${_a.REGEX_IMMEDIATE}$`;\nMipsInstructionFormat.FORMAT_THREE_REGISTER = new MipsInstructionFormat(_a.REGEX_THREE_REGISTER, isInstructionDeclaredAsR, getThreeRegistersBits);\nMipsInstructionFormat.FORMAT_TWO_R_ONE_I = new MipsInstructionFormat(_a.REGEX_TWO_R_ONE_I, isInstructionDeclaredAsI, getImmediateInstructionBits);\nMipsInstructionFormat.FORMAT_LOAD_STORE = new MipsInstructionFormat(_a.REGEX_LOAD_STORE, isLoadStoreInstruction, getLoadStoreInstructionBits);\nMipsInstructionFormat.FORMAT_JUMP = new MipsInstructionFormat(_a.REGEX_JUMP, isJumpInstruction, getJumpInstructionBits);\nMipsInstructionFormat.FORMATS = [\n    MipsInstructionFormat.FORMAT_THREE_REGISTER,\n    MipsInstructionFormat.FORMAT_TWO_R_ONE_I,\n    MipsInstructionFormat.FORMAT_LOAD_STORE,\n    MipsInstructionFormat.FORMAT_JUMP,\n];\n","import RInstruction from \"../r-instruction\";\nimport IInstruction from \"../i-instruction\";\nimport JInstruction from \"../j-instruction\";\nimport './extractors';\nimport instructionSpecs from '../../data/instructionSpec.json';\nimport '../field-extractor';\nimport UnknownInstruction from '../unknown-instruction';\nimport { Parser } from \"./input-parser\";\nimport { MipsInstructionFormat } from \"../mips-formats/mips-instruction-format\";\nfunction getType(binary) {\n    if (binary.length < 6) {\n        return 'U';\n    }\n    const opcode = parseInt(binary.substring(0, 6), 2);\n    if (opcode === 0) {\n        // R-type instruction\n        return 'R';\n    }\n    else {\n        const instruction = instructionSpecs.find(i => i.opcode === opcode);\n        return instruction === null || instruction === void 0 ? void 0 : instruction.type;\n    }\n}\n/**\n * Parses a MIPS instruction and returns an Instruction.\n */\nexport class MipsDecoder extends Parser {\n    constructor(binary, settings) {\n        super();\n        this.instruction = MipsDecoder.decode(binary, settings);\n    }\n    static decode(binary, settings) {\n        const type = getType(binary);\n        switch (type) {\n            case 'R': {\n                return RInstruction.fromBinary(binary, settings);\n            }\n            case 'I': {\n                return IInstruction.fromBinary(binary, settings);\n            }\n            case 'J': {\n                return JInstruction.fromBinary(binary, settings);\n            }\n            case 'U':\n                return UnknownInstruction.fromBinary(binary, settings);\n        }\n    }\n    get() {\n        return this.instruction;\n    }\n    getParseInfo() {\n        return null;\n    }\n}\n// TODO: Make this return an Instruction to be more consistent.\n/**\n * Parses a MIPS instruction and returns its binary form.\n */\nexport class MipsEncoder extends Parser {\n    constructor(mipsString) {\n        var _a;\n        super();\n        // this.encodedInstruction = this.getMipsInstructionBinary(mipsInstruction);\n        // Try to map instruction to every format\n        const results = MipsInstructionFormat.FORMATS\n            .map(format => format.parseMips(mipsString));\n        const instructionResult = (_a = results\n            .find(result => result.value !== null)) !== null && _a !== void 0 ? _a : null;\n        const message = results.map(f => { var _a, _b; return (_b = (_a = f.message) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : ''; }).join('');\n        if (instructionResult !== null) {\n            // Found instruction\n            this.result = instructionResult;\n        }\n        else {\n            // No instruction found\n            this.result = {\n                value: null,\n                message: {\n                    value: message,\n                    severity: 'error',\n                }\n            };\n        }\n    }\n    get() {\n        return this.result.value;\n    }\n    getParseInfo() {\n        return this.result.message;\n    }\n}\n","export function hexToBin(hex) {\n    if (!hex)\n        return \"\";\n    const newLength = hex.length * 4;\n    return parseInt(hex, 16).toString(2).padStart(newLength, \"0\");\n}\nexport function binToHex(bin) {\n    if (!bin)\n        return \"\";\n    const newLength = Math.ceil(bin.length / 4) * 4;\n    const paddedBin = bin.padEnd(newLength, \"0\");\n    return paddedBin\n        .match(/.{1,4}/g)\n        .map((bits) => parseInt(bits, 2).toString(16))\n        .join(\"\");\n}\nexport function getZeroPadding(binary) {\n    return \"0\".repeat(Math.max(0, 32 - binary.length));\n}\nexport function formatBinary(binary) {\n    var _a, _b;\n    return (_b = (_a = binary.match(/.{1,4}/g)) === null || _a === void 0 ? void 0 : _a.join(\" \")) !== null && _b !== void 0 ? _b : \"\";\n}\nexport function formatBinaryEnd(binary) {\n    const chunkCount = Math.floor(binary.length / 4);\n    const partialChunkSize = binary.length % 4;\n    const partialChunk = \"0\".repeat(partialChunkSize);\n    return partialChunk + \" 0000\".repeat(chunkCount);\n}\n","<script lang=\"ts\">\n\timport type { Instruction } from './instructions';\n\timport { BinFormat, DecFormat, HexFormat, ImmediateFormat } from './instructions/format/format';\n\timport { MipsDecoder, MipsEncoder } from './instructions/parser/mips-parser';\n\timport { BinInputParser, HexInputParser } from './instructions/parser/input-parser';\n\timport type { ParseInfo } from './instructions/parser/parse-info';\n\timport { binToHex, hexToBin } from './utils';\n\timport type { Settings } from './instructions/settings';\n\n\tconst immediateFormats = [new HexFormat(), new DecFormat(), new BinFormat()];\t\n\n\tlet hexInput: string;\n\tlet binInput: string;\n\tlet instructionInput: string;\n\t// let isInputHex = true;\n\t// let inputType: InputType = 'encoded';\n\tlet encodedParseInfo: ParseInfo | null = null;\n\tlet mipsParseInfo: ParseInfo | null = null;\n\n\t// Settings\n\tlet settings: Settings = {\n\t\tencodedInputMode: 'hex',\n\t\tinputMode: 'encoded',\n\t\tregisterMode: 'names',\n\t\timmediateFormat: immediateFormats[0],\n\t};\n\t// let registerMode: RegisterMode = 'names';\n\t// let showImmediateAs: ImmediateFormat = immediateFormats[0];\n\n\tfunction toggleInput(): void {\n\t\tsettings.encodedInputMode = settings.encodedInputMode === 'hex' ? 'binary' : 'hex';\n\t}\n\n\tfunction toggleInputType(): void {\n\t\tsettings.inputMode = settings.inputMode === 'encoded' ? 'mips' : 'encoded';\n\t}\n\n\tlet binary: string;\n\n\t$: {\n\t\tif (settings.inputMode === 'encoded') {\n\t\t\tif (settings.encodedInputMode === 'hex') {\n\t\t\t\tconst parser = new HexInputParser(hexInput ?? '');\n\n\t\t\t\t// Update binary\n\t\t\t\tbinary = hexToBin(parser.get());\n\n\t\t\t\t// Update other input\n\t\t\t\tbinInput = binary;\n\t\t\t\tencodedParseInfo = parser.getParseInfo();\n\t\t\t} else {\n\t\t\t\tconst parser = new BinInputParser(binInput ?? '');\n\n\t\t\t\t// Update binary\n\t\t\t\tbinary = parser.get();\n\n\t\t\t\t// Update other input\n\t\t\t\thexInput = binToHex(binary);\n\t\t\t\tencodedParseInfo = parser.getParseInfo();\n\t\t\t}\n\t\t} else {\n\t\t\t// Input type is mips\n\t\t\tconst encoder = new MipsEncoder(instructionInput?.trim() ?? '');\n\t\t\tmipsParseInfo = encoder.getParseInfo();\n\t\t\tbinary = encoder.get() ?? '';\n\t\t}\n\t}\n\n\t$: fullBinary = binary.padEnd(32, '0');\n\t$: fullHexadecimal = parseInt(fullBinary, 2).toString(16).padStart(8, '0');\n\t$: hexDisplay = binToHex(binary);\n\n\n\tlet instruction: Instruction;\n\t$: instruction = new MipsDecoder(binary, settings).get();\n\t$: fields = instruction?.fields ?? [];\n\t$: mipsInstruction = instruction?.toMips() ?? null;\n</script>\n\n<main>\n\t<h1>mips converter</h1>\n\t<section class=\"raised\">\n\t\t<form autocomplete=\"off\" on:submit={(e) => e.preventDefault()}>\n\t\t\t<h2 class=\"remove-margin-top\">Input</h2>\n\t\t\t<div>\n\t\t\t\t<button id=\"change-input-type-button\" class=\"icon-button\" on:click={toggleInputType}>\n\t\t\t\t\t<label for=\"change-input-type-button\">using {settings.inputMode}</label>\n\t\t\t\t\t<span class=\"material-icons\">\n\t\t\t\t\t\tsync\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class=\"split\">\n\t\t\t\t<fieldset disabled={settings.inputMode === 'mips'}>\n\t\t\t\t\t<h3>encoded instruction</h3>\n\t\t\t\t\t{#if settings.encodedInputMode === 'hex'}\n\t\t\t\t\t<div class=\"input full-width\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"hexInput\"\n\t\t\t\t\t\t\tclass=\"code\"\n\t\t\t\t\t\t\tbind:value={hexInput}\n\t\t\t\t\t\t\tplaceholder=\"0x12345678\"\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t\t{#if settings.encodedInputMode === 'binary'}\n\t\t\t\t\t<div class=\"input full-width\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"binInput\"\n\t\t\t\t\t\t\tclass=\"code\"\n\t\t\t\t\t\t\tbind:value={binInput}\n\t\t\t\t\t\t\tplaceholder=\"01011001...\"\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t\t\n\t\t\t\t\t{#if encodedParseInfo !== null}\n\t\t\t\t\t\t<p class=\"error\">{encodedParseInfo.value}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<button id=\"change-input-button\" class=\"icon-button\" on:click={toggleInput}>\n\t\t\t\t\t\t<label for=\"change-input-button\">as {settings.encodedInputMode}</label>\n\t\t\t\t\t\t<span class=\"material-icons\">\n\t\t\t\t\t\t\tsync\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</button>\n\t\t\t\t</fieldset>\n\t\t\t\t<fieldset disabled={settings.inputMode === 'encoded'}>\n\t\t\t\t\t<h3>mips instruction</h3>\n\t\t\t\t\t<div class=\"input full-width\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"mipsInput\"\n\t\t\t\t\t\t\tclass=\"code\"\n\t\t\t\t\t\t\tbind:value={instructionInput}\n\t\t\t\t\t\t\tplaceholder=\"add ...\"\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if mipsParseInfo !== null}\n\t\t\t\t\t\t<p class=\"error\">{mipsParseInfo.value}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t</form>\n\t</section>\n\t<section class=\"raised\">\n\t\t<h2 class=\"remove-margin-top\">Bit information</h2>\n\t\t<table class=\"code-table raw-table transparent\">\n\t\t\t<tr>\n\t\t\t\t<!-- <th class=\"vertical-th\"></th> -->\n\t\t\t\t\n\t\t\t\t{#each ['', 32, 28, 24, 16, 12 ,8 ,4, 0] as index}\n\t\t\t\t\t<td style=\"text-align: right\">{index}</td>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t</table>\n\t\t<table class=\"code-table raw-table\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"vertical-th\">Binary</th>\n\t\t\t\t\t{#each (fullBinary.match(/.{1,4}/g) ?? []) as chunk, i}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{#if i * 4 >= binary.length}\n\t\t\t\t\t\t\t\t<span class=\"gray\">{chunk}</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t{#if i * 4 + 4 <= binary.length}\n\t\t\t\t\t\t\t\t<span>{chunk}</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t{#if i * 4 < binary.length && i * 4 + 4 > binary.length}\n\t\t\t\t\t\t\t\t<span>{chunk.substring(0, binary.length - i * 4)}</span><!--\n\t\t\t\t\t\t\t\t--><span class=\"gray\">{'0'.repeat(4 - (binary.length - i * 4))}</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"vertical-th\">Hex</th>\n\t\t\t\t\t{#each fullHexadecimal.split('') as chunk, i}\n\t\t\t\t\t\t<td class={i >= hexDisplay.length ? 'gray' : ''}>{chunk}</td>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</section>\n\t<section id=\"decoded-instruction-section\" class=\"raised\">\n\t\t<h2 style=\"margin-block-start: 0;\">MIPS instruction</h2>\n\t\t<div>\n\t\t\t<span id=\"mips-instruction\" class=\"code inset\">\n\t\t\t\t{mipsInstruction ?? 'unknown'}\n\t\t\t</span>\n\t\t</div>\n\t\t<div><span class=\"code inset\">0x{fullHexadecimal}</span></div>\n\t\t<div><span class=\"code inset\">0b{fullBinary}</span></div>\n\t\t<div id=\"settings\">\n\t\t\t<div class=\"setting\">\n\t\t\t\t<label for=\"immediateFormat\">Display immediate as:</label>\n\t\t\t\t<select id=\"immediateFormat\" bind:value={settings.immediateFormat}>\n\t\t\t\t\t{#each immediateFormats as format}\n\t\t\t\t\t\t<option value={format}>\n\t\t\t\t\t\t\t{format.name}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<div class=\"setting\">\n\t\t\t\t<label for=\"registerMode\">Show registers as:</label>\n\t\t\t\t<select id=\"registerMode\" bind:value={settings.registerMode}>\n\t\t\t\t\t{#each ['names', 'numbers'] as mode}\n\t\t\t\t\t\t<option value={mode}>\n\t\t\t\t\t\t\t{mode}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<h3>Info</h3>\n\t\t<table id=\"fields\" class=\"code-table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t{#each fields as field}\n\t\t\t\t\t\t<th>{field.name}</th>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t{#each fields as field}\n\t\t\t\t\t\t<td>{field.value}</td>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t{#each fields as field}\n\t\t\t\t\t\t<td style=\"width: {field.length / 32}%\">\n\t\t\t\t\t\t\t<span>{field.binary}</span><!--\n\t\t\t\t\t\t--><span class=\"gray\">{'0'.repeat(field.length - field.binary.length)}</span>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</section>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: left;\n\t\tpadding: 1em;\n\t\tmax-width: 50rem;\n\t\tmargin: 0 auto;\n\t\t--table-border-width: 0.1rem;\n\t}\n\n\t.split {\n\t\tdisplay: flex;\n\t}\n\n\t.split > * {\n\t\tflex: 1;\n\t}\n\n\t.split > *:not(:first-child) {\n\t\tmargin-inline-start: 1rem;\n\t}\n\n\t.code {\n\t\tfont-family: 'Inconsolata', monospace;\n\t\tfont-weight: bold;\n\t}\n\n\t.gray {\n\t\topacity: 50%;\n\t}\n\n\t.remove-margin-top {\n\t\tmargin-block-start: 0;\n\t}\n\n\t.raised {\n\t\tbox-shadow:  8px 8px 36px #232c3b,\n             -8px -8px 36px #37445d;\n\t\tborder-radius: 1rem;\n\t\tmargin-inline: -1rem;\n\t\tmargin-block-end: 2rem;\n\t\tpadding-inline: 1rem;\n\t\tpadding-block: 1.5rem;\n\t}\n\n\ttable.transparent,\n\ttable.transparent td {\n\t\tborder-color: transparent;\n\t}\n\n\t.raw-table {\n\t\ttable-layout: fixed;\n\t}\n\n\ttable:not(#fields) {\n\t\tborder-collapse: collapse;\n\t}\n\n\ttable:not(#fields):not(.transparent) td {\n\t\tborder-collapse: collapse;\n\t\tborder: var(--table-border-width) solid var(--clr-on);\n\t}\n\n\ttable#fields th,\n\ttable#fields td {\n\t\tborder-top: var(--table-border-width) solid var(--clr-on);\n\t\tborder-right: var(--table-border-width) solid var(--clr-on);\n\t}\n\n\ttable#fields {\n\t\tborder-spacing: 0;\n\t\tborder-left: var(--table-border-width) solid var(--clr-on);\n\t\tborder-bottom: var(--table-border-width) solid var(--clr-on);\n\t\t/* border-collapse: collapse; */\n\t}\n\n\ttable { \n\t\twidth: 100%;\n\t\ttext-align: center;\n\t}\n\n\t.code-table td {\n\t\tfont-family: 'Inconsolata', monospace;\n\t\tfont-weight: bold;\n\t}\n\n\ttable .vertical-th {\n\t\ttext-align: end;\n\t\tmargin-right: 2rem;\n\t\tborder-inline-start-color: transparent;\n\t\tborder-block-color: transparent;\n\t}\n\n\ttable .vertical-th:after {\n\t\tcontent: '   ';\n\t\twhite-space: pre;\n\t}\n\n\t.icon-button {\n\t\tdisplay: flex;\n\t\talign-items: end;\n\t\tpadding-inline: 0.5rem;\n\t\tpadding-block: 0.5rem;\n\t\tvertical-align: middle;\n\t\ttext-align: center;\n\t}\n\n\t.icon-button:disabled {\n\t\tborder-color: var(--clr-disabled);\n\t\tcolor: var(--clr-disabled);\n\t}\n\n\t.icon-button label {\n\t\tmargin-inline: 0.3rem;\n\t}\n\n\t.input.full-width input {\n\t\twidth: 100%;\n\t}\n\n\t.input label {\n\t\tmargin-block-end: 0.2em;\n\t}\n\n\t.setting label {\n\t\tfont-size: 1rem;\n\t\tfont-weight: bold;\n\t\tmargin-block-end: 0.5rem;\n\t}\n\n\t#change-input-button {\n\t\tmargin: 0;\n\t}\n\n\t#settings {\n\t\tmargin-block-start: 2em;\n\t\tdisplay: flex;\n\t}\n\n\t#settings > .setting {\n\t\tmargin-inline-end: 2rem;\n\t}\n\n\t#mips-instruction {\n\t\tfont-size: 1.5rem;\n\t\tcolor: var(--clr-on-background);\n\t\tdisplay: inline-block;\n\t\tpadding-inline: 1rem;\n\t\tpadding-block: 0.5rem;\n\t\tmargin-block-start: 0;\n\t}\n\n\t.inset {\n\t\tbox-shadow: inset 5px 5px 7px #273142,\n            inset -5px -5px 7px #333f56;\n\t\tborder-radius: 0.5rem;\n\t\tdisplay: inline-block;\n\t\tpadding-inline: 1em;\n\t\tpadding-block: 0.5em;\n\t\tmargin-block-end: 0.5em;\n\t}\n\n\t@media (max-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\n\t\t.split {\n\t\t\tdisplay: block;\n\t\t}\n\n\t\t.split > *:not(:first-child) {\n\t\t\tmargin-inline-start: 0rem;\n\t\t}\n\n\t\t\n\t\t#settings {\n\t\t\tdisplay: block;\n\t\t}\n\n\t\t#settings > .setting {\n\t\t\tmargin-inline-end: 0;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","selectedIndex","select_value","selected_option","querySelector","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","ImmediateFormat","constructor","this","HexFormat","super","format","binary","parseInt","toString","DecFormat","BinFormat","InstructionField","interpolatedValue","padEnd","FieldExtractor","bits","extractBits","extracted","substring","extractField","getValue","fieldValue","extractedBits","e","Instruction","opcode","fields","spec","rInstructions","instructions","functionCode","getOpcodeValue","_a","instruction","find","mnemonic","getShiftAmount","shiftAmount","getFunctionCode","getUnknown","getRegisterNumber","getRegisterName","_b","registerNumber","registers","r","number","RInstruction","rs","rt","rd","shamt","funct","instructionSpecs","static","settings","extractor","getRegister","registerMode","toMips","usedFieldNames","getRelevantFields","fieldsInInstruction","commaDelimitedRegisters","f","includes","sort","f1","f2","indexOf","join","IInstruction","immediate","immediateFormat","filteredFields","formatString","fieldValues","formatIInstruction","JInstruction","jumpAddress","address","UnknownInstruction","unknown","Parser","InputParser","regex","formatName","toParse","matches","match","parseInfo","severity","get","getParseInfo","BinInputParser","HexInputParser","shiftMnemonics","loadStoreMnemonics","isShiftInstruction","instructionSpec","isLoadStoreInstruction","parseRegisterToBits","registerName","nameAsNumber","isNaN","getRegisterNumberFromName","message","padStart","parseImmediateWithLengthToBits","fieldName","signed","getImmediateInstructionBits","args","Error","isShift","results","result","reduce","m1","m2","some","rsBits","functBits","rdBits","rtBits","shamtBits","immediateBits","MipsInstructionFormat","instructionRegex","getSpecMatchesFormat","getArgBits","parseMips","mipsString","toLowerCase","getInstructionSpecWithMnemonic","slice","argBits","REGEX_REGISTER","REGEX_IMMEDIATE","REGEX_MNEMONIC","REGEX_THREE_REGISTER","REGEX_TWO_R_ONE_I","REGEX_LOAD_STORE","REGEX_JUMP","FORMAT_THREE_REGISTER","type","FORMAT_TWO_R_ONE_I","FORMAT_LOAD_STORE","FORMAT_JUMP","FORMATS","MipsDecoder","decode","getType","fromBinary","MipsEncoder","instructionResult","binToHex","bin","newLength","Math","ceil","repeat","inputMode","encodedInputMode","split","preventDefault","_c","_d","immediateFormats","hexInput","binInput","instructionInput","encodedParseInfo","mipsParseInfo","parser","hex","hexToBin","encoder","trim","fullBinary","fullHexadecimal","hexDisplay","mipsInstruction","$destroy","destroy_component","$on","index","splice","$set","$$props","obj","$$set","keys","body"],"mappings":"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"}